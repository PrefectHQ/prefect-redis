{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-redis Welcome! Prefect integrations for working with Redis Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-redis with pip : pip install prefect-redis Then, register to view the block on Prefect Cloud: prefect block register -m prefect_redis.credentials Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI . Write and run a flow from prefect import flow from prefect_redis import ( RedisCredentials , redis_set , redis_get , ) @flow def example_flow (): # Load credentials-block credentials = RedisCredentials . load ( \"my-redis-store\" ) # Set a redis-key - Supports any object that is not a live connection redis_set ( credentials , \"mykey\" , { \"foo\" : \"bar\" }) # Get a redis key val = redis_get ( credentials , \"mykey\" ) print ( val ) example_flow () Resources If you encounter any bugs while using prefect-redis , feel free to open an issue in the prefect-redis repository. If you have any questions or issues while using prefect-redis , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-redis for updates too! Development If you'd like to install a version of prefect-redis for development, clone the repository and perform an editable install with pip : git clone https://github.com/C4IROcean/prefect-redis.git cd prefect-redis/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-redis","text":"","title":"prefect-redis"},{"location":"#welcome","text":"Prefect integrations for working with Redis","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-redis with pip : pip install prefect-redis Then, register to view the block on Prefect Cloud: prefect block register -m prefect_redis.credentials Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI .","title":"Installation"},{"location":"#write-and-run-a-flow","text":"from prefect import flow from prefect_redis import ( RedisCredentials , redis_set , redis_get , ) @flow def example_flow (): # Load credentials-block credentials = RedisCredentials . load ( \"my-redis-store\" ) # Set a redis-key - Supports any object that is not a live connection redis_set ( credentials , \"mykey\" , { \"foo\" : \"bar\" }) # Get a redis key val = redis_get ( credentials , \"mykey\" ) print ( val ) example_flow ()","title":"Write and run a flow"},{"location":"#resources","text":"If you encounter any bugs while using prefect-redis , feel free to open an issue in the prefect-redis repository. If you have any questions or issues while using prefect-redis , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-redis for updates too!","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-redis for development, clone the repository and perform an editable install with pip : git clone https://github.com/C4IROcean/prefect-redis.git cd prefect-redis/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"credentials/","text":"prefect_redis.credentials Redis credentials handling RedisCredentials Block used to manage authentication with Redis Attributes: Name Type Description host str The value to store. port int The value to store. db int The value to store. username str The value to store. password str The value to store. connection_string str The value to store. Example Create a new block from hostname, username and password: from prefect_redis import RedisBlock block = RedisBlock . from_host ( host = \"myredishost.com\" , username = \"redis\" , password = \"SuperSecret\" ) block . save ( \"BLOCK_NAME\" ) Create a new block from a connection string from prefect_redis import RedisBlock block = RedisBlock . from_url ( \"\" redis : // redis : SuperSecret @myredishost . com : 6379 \") block . save ( \"BLOCK_NAME\" ) Get Redis client in order to interact directly with Redis from prefect_redis import RedisBlock block = RedisBlock . load ( \"BLOCK_NAME\" ) redis_client = block . get_client () Source code in prefect_redis/credentials.pyclass RedisCredentials ( WritableFileSystem ): \"\"\" Block used to manage authentication with Redis Attributes: host (str): The value to store. port (int): The value to store. db (int): The value to store. username (str): The value to store. password (str): The value to store. connection_string (str): The value to store. Example: Create a new block from hostname, username and password: ```python from prefect_redis import RedisBlock block = RedisBlock.from_host( host=\"myredishost.com\", username=\"redis\", password=\"SuperSecret\") block.save(\"BLOCK_NAME\") ``` Create a new block from a connection string ```python from prefect_redis import RedisBlock block = RedisBlock.from_url(\"\"redis://redis:SuperSecret@myredishost.com:6379\") block.save(\"BLOCK_NAME\") ``` Get Redis client in order to interact directly with Redis ```python from prefect_redis import RedisBlock block = RedisBlock.load(\"BLOCK_NAME\") redis_client = block.get_client() ``` \"\"\" _logo_url = \"https://stprododpcmscdnendpoint.azureedge.net/assets/icons/redis.png\" DEFAULT_PORT = 6379 host : Optional [ str ] = Field ( default = None , description = \"Redis hostname\" ) port : int = Field ( default = DEFAULT_PORT , description = \"Redis port\" ) db : int = Field ( default = 0 , description = \"Redis DB index\" ) username : Optional [ SecretStr ] = Field ( default = None , description = \"Redis username\" ) password : Optional [ SecretStr ] = Field ( default = None , description = \"Redis password\" ) connection_string : Optional [ SecretStr ] = Field ( default = None , description = \"Redis connection string\" ) def block_initialization ( self ) -> None : \"\"\"Validate parameters\"\"\" if self . connection_string : return if not self . host : raise ValueError ( \"Missing hostname\" ) if self . username and not self . password : raise ValueError ( \"Missing password\" ) async def read_path ( self , path : str ) -> bytes : \"\"\"Read a redis key Args: path: Redis key to read from Returns: Contents at key as bytes \"\"\" client = self . get_client () ret = await client . get ( path ) await client . close () return ret async def write_path ( self , path : str , content : bytes ) -> None : \"\"\"Write to a redis key Args: path: Redis key to write to content: Binary object to write \"\"\" client = self . get_client () ret = await client . set ( path , content ) await client . close () return ret def get_client ( self ) -> redis . Redis : \"\"\"Get Redis Client Returns: An initialized Redis async client \"\"\" if self . connection_string : return redis . Redis . from_url ( self . connection_string . get_secret_value ()) return redis . Redis ( host = self . host , port = self . port , username = self . username . get_secret_value () if self . username else None , password = self . password . get_secret_value () if self . password else None , db = self . db , ) @classmethod def from_host ( cls , host : str , username : Union [ None , str , SecretStr ], password : Union [ None , str , SecretStr ], port : int = DEFAULT_PORT , ) -> \"RedisCredentials\" : \"\"\"Create block from hostname, username and password Args: host: Redis hostname username: Redis username password: Redis password port: Redis port Returns: `RedisCredentials` instance \"\"\" return cls ( host = host , username = username , password = password , port = port ) @classmethod def from_connection_string ( cls , connection_string : Union [ str , SecretStr ] ) -> \"RedisCredentials\" : \"\"\"Create block from a Redis connection string Supports the following URL schemes: - `redis://` creates a TCP socket connection - `rediss://` creates a SSL wrapped TCP socket connection - `unix://` creates a Unix Domain Socket connection See [Redis docs](https://redis.readthedocs.io/en/stable/examples /connection_examples.html#Connecting-to-Redis-instances-by-specifying-a-URL -scheme.) for more info. Args: connection_string: Redis connection string Returns: `RedisCredentials` instance \"\"\" return cls ( connection_string = connection_string ) block_initialization Validate parameters Source code in prefect_redis/credentials.py 61 62 63 64 65 66 67 68 69 def block_initialization ( self ) -> None : \"\"\"Validate parameters\"\"\" if self . connection_string : return if not self . host : raise ValueError ( \"Missing hostname\" ) if self . username and not self . password : raise ValueError ( \"Missing password\" ) from_connection_string classmethod Create block from a Redis connection string Supports the following URL schemes: - redis:// creates a TCP socket connection - rediss:// creates a SSL wrapped TCP socket connection - unix:// creates a Unix Domain Socket connection See Redis docs for more info. Parameters: Name Type Description Default connection_string Union [ str , SecretStr ] Redis connection string required Returns: Type Description RedisCredentials RedisCredentials instance Source code in prefect_redis/credentials.py 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 @classmethod def from_connection_string ( cls , connection_string : Union [ str , SecretStr ] ) -> \"RedisCredentials\" : \"\"\"Create block from a Redis connection string Supports the following URL schemes: - `redis://` creates a TCP socket connection - `rediss://` creates a SSL wrapped TCP socket connection - `unix://` creates a Unix Domain Socket connection See [Redis docs](https://redis.readthedocs.io/en/stable/examples /connection_examples.html#Connecting-to-Redis-instances-by-specifying-a-URL -scheme.) for more info. Args: connection_string: Redis connection string Returns: `RedisCredentials` instance \"\"\" return cls ( connection_string = connection_string ) from_host classmethod Create block from hostname, username and password Parameters: Name Type Description Default host str Redis hostname required username Union [None, str , SecretStr ] Redis username required password Union [None, str , SecretStr ] Redis password required port int Redis port DEFAULT_PORT Returns: Type Description RedisCredentials RedisCredentials instance Source code in prefect_redis/credentials.py 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 @classmethod def from_host ( cls , host : str , username : Union [ None , str , SecretStr ], password : Union [ None , str , SecretStr ], port : int = DEFAULT_PORT , ) -> \"RedisCredentials\" : \"\"\"Create block from hostname, username and password Args: host: Redis hostname username: Redis username password: Redis password port: Redis port Returns: `RedisCredentials` instance \"\"\" return cls ( host = host , username = username , password = password , port = port ) get_client Get Redis Client Returns: Type Description redis . Redis An initialized Redis async client Source code in prefect_redis/credentials.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 def get_client ( self ) -> redis . Redis : \"\"\"Get Redis Client Returns: An initialized Redis async client \"\"\" if self . connection_string : return redis . Redis . from_url ( self . connection_string . get_secret_value ()) return redis . Redis ( host = self . host , port = self . port , username = self . username . get_secret_value () if self . username else None , password = self . password . get_secret_value () if self . password else None , db = self . db , ) read_path async Read a redis key Parameters: Name Type Description Default path str Redis key to read from required Returns: Type Description bytes Contents at key as bytes Source code in prefect_redis/credentials.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 async def read_path ( self , path : str ) -> bytes : \"\"\"Read a redis key Args: path: Redis key to read from Returns: Contents at key as bytes \"\"\" client = self . get_client () ret = await client . get ( path ) await client . close () return ret write_path async Write to a redis key Parameters: Name Type Description Default path str Redis key to write to required content bytes Binary object to write required Source code in prefect_redis/credentials.py 86 87 88 89 90 91 92 93 94 95 96 97 async def write_path ( self , path : str , content : bytes ) -> None : \"\"\"Write to a redis key Args: path: Redis key to write to content: Binary object to write \"\"\" client = self . get_client () ret = await client . set ( path , content ) await client . close () return ret","title":"Credentials"},{"location":"credentials/#prefect_redis.credentials","text":"Redis credentials handling","title":"credentials"},{"location":"credentials/#prefect_redis.credentials.RedisCredentials","text":"Block used to manage authentication with Redis Attributes: Name Type Description host str The value to store. port int The value to store. db int The value to store. username str The value to store. password str The value to store. connection_string str The value to store. Example Create a new block from hostname, username and password: from prefect_redis import RedisBlock block = RedisBlock . from_host ( host = \"myredishost.com\" , username = \"redis\" , password = \"SuperSecret\" ) block . save ( \"BLOCK_NAME\" ) Create a new block from a connection string from prefect_redis import RedisBlock block = RedisBlock . from_url ( \"\" redis : // redis : SuperSecret @myredishost . com : 6379 \") block . save ( \"BLOCK_NAME\" ) Get Redis client in order to interact directly with Redis from prefect_redis import RedisBlock block = RedisBlock . load ( \"BLOCK_NAME\" ) redis_client = block . get_client () Source code in prefect_redis/credentials.pyclass RedisCredentials ( WritableFileSystem ): \"\"\" Block used to manage authentication with Redis Attributes: host (str): The value to store. port (int): The value to store. db (int): The value to store. username (str): The value to store. password (str): The value to store. connection_string (str): The value to store. Example: Create a new block from hostname, username and password: ```python from prefect_redis import RedisBlock block = RedisBlock.from_host( host=\"myredishost.com\", username=\"redis\", password=\"SuperSecret\") block.save(\"BLOCK_NAME\") ``` Create a new block from a connection string ```python from prefect_redis import RedisBlock block = RedisBlock.from_url(\"\"redis://redis:SuperSecret@myredishost.com:6379\") block.save(\"BLOCK_NAME\") ``` Get Redis client in order to interact directly with Redis ```python from prefect_redis import RedisBlock block = RedisBlock.load(\"BLOCK_NAME\") redis_client = block.get_client() ``` \"\"\" _logo_url = \"https://stprododpcmscdnendpoint.azureedge.net/assets/icons/redis.png\" DEFAULT_PORT = 6379 host : Optional [ str ] = Field ( default = None , description = \"Redis hostname\" ) port : int = Field ( default = DEFAULT_PORT , description = \"Redis port\" ) db : int = Field ( default = 0 , description = \"Redis DB index\" ) username : Optional [ SecretStr ] = Field ( default = None , description = \"Redis username\" ) password : Optional [ SecretStr ] = Field ( default = None , description = \"Redis password\" ) connection_string : Optional [ SecretStr ] = Field ( default = None , description = \"Redis connection string\" ) def block_initialization ( self ) -> None : \"\"\"Validate parameters\"\"\" if self . connection_string : return if not self . host : raise ValueError ( \"Missing hostname\" ) if self . username and not self . password : raise ValueError ( \"Missing password\" ) async def read_path ( self , path : str ) -> bytes : \"\"\"Read a redis key Args: path: Redis key to read from Returns: Contents at key as bytes \"\"\" client = self . get_client () ret = await client . get ( path ) await client . close () return ret async def write_path ( self , path : str , content : bytes ) -> None : \"\"\"Write to a redis key Args: path: Redis key to write to content: Binary object to write \"\"\" client = self . get_client () ret = await client . set ( path , content ) await client . close () return ret def get_client ( self ) -> redis . Redis : \"\"\"Get Redis Client Returns: An initialized Redis async client \"\"\" if self . connection_string : return redis . Redis . from_url ( self . connection_string . get_secret_value ()) return redis . Redis ( host = self . host , port = self . port , username = self . username . get_secret_value () if self . username else None , password = self . password . get_secret_value () if self . password else None , db = self . db , ) @classmethod def from_host ( cls , host : str , username : Union [ None , str , SecretStr ], password : Union [ None , str , SecretStr ], port : int = DEFAULT_PORT , ) -> \"RedisCredentials\" : \"\"\"Create block from hostname, username and password Args: host: Redis hostname username: Redis username password: Redis password port: Redis port Returns: `RedisCredentials` instance \"\"\" return cls ( host = host , username = username , password = password , port = port ) @classmethod def from_connection_string ( cls , connection_string : Union [ str , SecretStr ] ) -> \"RedisCredentials\" : \"\"\"Create block from a Redis connection string Supports the following URL schemes: - `redis://` creates a TCP socket connection - `rediss://` creates a SSL wrapped TCP socket connection - `unix://` creates a Unix Domain Socket connection See [Redis docs](https://redis.readthedocs.io/en/stable/examples /connection_examples.html#Connecting-to-Redis-instances-by-specifying-a-URL -scheme.) for more info. Args: connection_string: Redis connection string Returns: `RedisCredentials` instance \"\"\" return cls ( connection_string = connection_string )","title":"RedisCredentials"},{"location":"credentials/#prefect_redis.credentials.RedisCredentials.block_initialization","text":"Validate parameters Source code in prefect_redis/credentials.py 61 62 63 64 65 66 67 68 69 def block_initialization ( self ) -> None : \"\"\"Validate parameters\"\"\" if self . connection_string : return if not self . host : raise ValueError ( \"Missing hostname\" ) if self . username and not self . password : raise ValueError ( \"Missing password\" )","title":"block_initialization()"},{"location":"credentials/#prefect_redis.credentials.RedisCredentials.from_connection_string","text":"Create block from a Redis connection string Supports the following URL schemes: - redis:// creates a TCP socket connection - rediss:// creates a SSL wrapped TCP socket connection - unix:// creates a Unix Domain Socket connection See Redis docs for more info. Parameters: Name Type Description Default connection_string Union [ str , SecretStr ] Redis connection string required Returns: Type Description RedisCredentials RedisCredentials instance Source code in prefect_redis/credentials.py 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 @classmethod def from_connection_string ( cls , connection_string : Union [ str , SecretStr ] ) -> \"RedisCredentials\" : \"\"\"Create block from a Redis connection string Supports the following URL schemes: - `redis://` creates a TCP socket connection - `rediss://` creates a SSL wrapped TCP socket connection - `unix://` creates a Unix Domain Socket connection See [Redis docs](https://redis.readthedocs.io/en/stable/examples /connection_examples.html#Connecting-to-Redis-instances-by-specifying-a-URL -scheme.) for more info. Args: connection_string: Redis connection string Returns: `RedisCredentials` instance \"\"\" return cls ( connection_string = connection_string )","title":"from_connection_string()"},{"location":"credentials/#prefect_redis.credentials.RedisCredentials.from_host","text":"Create block from hostname, username and password Parameters: Name Type Description Default host str Redis hostname required username Union [None, str , SecretStr ] Redis username required password Union [None, str , SecretStr ] Redis password required port int Redis port DEFAULT_PORT Returns: Type Description RedisCredentials RedisCredentials instance Source code in prefect_redis/credentials.py 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 @classmethod def from_host ( cls , host : str , username : Union [ None , str , SecretStr ], password : Union [ None , str , SecretStr ], port : int = DEFAULT_PORT , ) -> \"RedisCredentials\" : \"\"\"Create block from hostname, username and password Args: host: Redis hostname username: Redis username password: Redis password port: Redis port Returns: `RedisCredentials` instance \"\"\" return cls ( host = host , username = username , password = password , port = port )","title":"from_host()"},{"location":"credentials/#prefect_redis.credentials.RedisCredentials.get_client","text":"Get Redis Client Returns: Type Description redis . Redis An initialized Redis async client Source code in prefect_redis/credentials.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 def get_client ( self ) -> redis . Redis : \"\"\"Get Redis Client Returns: An initialized Redis async client \"\"\" if self . connection_string : return redis . Redis . from_url ( self . connection_string . get_secret_value ()) return redis . Redis ( host = self . host , port = self . port , username = self . username . get_secret_value () if self . username else None , password = self . password . get_secret_value () if self . password else None , db = self . db , )","title":"get_client()"},{"location":"credentials/#prefect_redis.credentials.RedisCredentials.read_path","text":"Read a redis key Parameters: Name Type Description Default path str Redis key to read from required Returns: Type Description bytes Contents at key as bytes Source code in prefect_redis/credentials.py 71 72 73 74 75 76 77 78 79 80 81 82 83 84 async def read_path ( self , path : str ) -> bytes : \"\"\"Read a redis key Args: path: Redis key to read from Returns: Contents at key as bytes \"\"\" client = self . get_client () ret = await client . get ( path ) await client . close () return ret","title":"read_path()"},{"location":"credentials/#prefect_redis.credentials.RedisCredentials.write_path","text":"Write to a redis key Parameters: Name Type Description Default path str Redis key to write to required content bytes Binary object to write required Source code in prefect_redis/credentials.py 86 87 88 89 90 91 92 93 94 95 96 97 async def write_path ( self , path : str , content : bytes ) -> None : \"\"\"Write to a redis key Args: path: Redis key to write to content: Binary object to write \"\"\" client = self . get_client () ret = await client . set ( path , content ) await client . close () return ret","title":"write_path()"},{"location":"tasks/","text":"prefect_redis.redis Redis tasks redis_execute async Execute Redis command Parameters: Name Type Description Default credentials RedisCredentials Redis credential block required cmd str Command to be executed required Returns: Type Description str Command response Source code in prefect_redis/redis.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 @task async def redis_execute ( credentials : \"RedisCredentials\" , cmd : str , ) -> str : \"\"\"Execute Redis command Args: credentials: Redis credential block cmd: Command to be executed Returns: Command response \"\"\" client = credentials . get_client () ret = await client . execute_command ( cmd ) await client . close () return ret redis_get async Get an object stored at a redis key. Will use cloudpickle to reconstruct the object. Parameters: Name Type Description Default credentials RedisCredentials Redis credential block required key str Key to get required Returns: Type Description Any Fully reconstructed object, decoded brom bytes in redis Source code in prefect_redis/redis.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 @task async def redis_get ( credentials : \"RedisCredentials\" , key : str , ) -> Any : \"\"\"Get an object stored at a redis key. Will use cloudpickle to reconstruct the object. Args: credentials: Redis credential block key: Key to get Returns: Fully reconstructed object, decoded brom bytes in redis \"\"\" binary_obj = await redis_get_binary . fn ( credentials , key ) return cloudpickle . loads ( binary_obj ) redis_get_binary async Get an bytes stored at a redis key Parameters: Name Type Description Default credentials RedisCredentials Redis credential block required key str Key to get required Returns: Type Description bytes Bytes from key in Redis Source code in prefect_redis/redis.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 @task async def redis_get_binary ( credentials : \"RedisCredentials\" , key : str , ) -> bytes : \"\"\"Get an bytes stored at a redis key Args: credentials: Redis credential block key: Key to get Returns: Bytes from `key` in Redis \"\"\" client = credentials . get_client () ret = await client . get ( key ) await client . close () return ret redis_set async Set a Redis key to a any value. Will use cloudpickle to convert value to binary representation. Parameters: Name Type Description Default credentials RedisCredentials Redis credential block required key str Key to be set required value Any Value to be set to key . Does not accept open connections such as database-connections required ex Optional [ float ] If provided, sets an expire flag in seconds on key set None px Optional [ float ] If provided, sets an expire flag in milliseconds on key set None nx bool If set to True , set the value at key to value only if it does not already exist False xx bool If set tot True , set the value at key to value only if it already exists False Source code in prefect_redis/redis.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 @task async def redis_set ( credentials : \"RedisCredentials\" , key : str , value : Any , ex : Optional [ float ] = None , px : Optional [ float ] = None , nx : bool = False , xx : bool = False , ) -> None : \"\"\"Set a Redis key to a any value. Will use cloudpickle to convert `value` to binary representation. Args: credentials: Redis credential block key: Key to be set value: Value to be set to `key`. Does not accept open connections such as database-connections ex: If provided, sets an expire flag in seconds on `key` set px: If provided, sets an expire flag in milliseconds on `key` set nx: If set to `True`, set the value at `key` to `value` only if it does not already exist xx: If set tot `True`, set the value at `key` to `value` only if it already exists \"\"\" return await redis_set_binary . fn ( credentials , key , cloudpickle . dumps ( value ), ex , px , nx , xx ) redis_set_binary async Set a Redis key to a binary value Parameters: Name Type Description Default credentials RedisCredentials Redis credential block required key str Key to be set required value bytes Value to be set to key . Must be bytes required ex Optional [ float ] If provided, sets an expire flag in seconds on key set None px Optional [ float ] If provided, sets an expire flag in milliseconds on key set None nx bool If set to True , set the value at key to value only if it does not already exist False xx bool If set tot True , set the value at key to value only if it already exists False Source code in prefect_redis/redis.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 @task async def redis_set_binary ( credentials : \"RedisCredentials\" , key : str , value : bytes , ex : Optional [ float ] = None , px : Optional [ float ] = None , nx : bool = False , xx : bool = False , ) -> None : \"\"\"Set a Redis key to a binary value Args: credentials: Redis credential block key: Key to be set value: Value to be set to `key`. Must be bytes ex: If provided, sets an expire flag in seconds on `key` set px: If provided, sets an expire flag in milliseconds on `key` set nx: If set to `True`, set the value at `key` to `value` only if it does not already exist xx: If set tot `True`, set the value at `key` to `value` only if it already exists \"\"\" client = credentials . get_client () await client . set ( key , value , ex = ex , px = px , nx = nx , xx = xx ) await client . close ()","title":"Tasks"},{"location":"tasks/#prefect_redis.redis","text":"Redis tasks","title":"redis"},{"location":"tasks/#prefect_redis.redis.redis_execute","text":"Execute Redis command Parameters: Name Type Description Default credentials RedisCredentials Redis credential block required cmd str Command to be executed required Returns: Type Description str Command response Source code in prefect_redis/redis.py 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 @task async def redis_execute ( credentials : \"RedisCredentials\" , cmd : str , ) -> str : \"\"\"Execute Redis command Args: credentials: Redis credential block cmd: Command to be executed Returns: Command response \"\"\" client = credentials . get_client () ret = await client . execute_command ( cmd ) await client . close () return ret","title":"redis_execute()"},{"location":"tasks/#prefect_redis.redis.redis_get","text":"Get an object stored at a redis key. Will use cloudpickle to reconstruct the object. Parameters: Name Type Description Default credentials RedisCredentials Redis credential block required key str Key to get required Returns: Type Description Any Fully reconstructed object, decoded brom bytes in redis Source code in prefect_redis/redis.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 @task async def redis_get ( credentials : \"RedisCredentials\" , key : str , ) -> Any : \"\"\"Get an object stored at a redis key. Will use cloudpickle to reconstruct the object. Args: credentials: Redis credential block key: Key to get Returns: Fully reconstructed object, decoded brom bytes in redis \"\"\" binary_obj = await redis_get_binary . fn ( credentials , key ) return cloudpickle . loads ( binary_obj )","title":"redis_get()"},{"location":"tasks/#prefect_redis.redis.redis_get_binary","text":"Get an bytes stored at a redis key Parameters: Name Type Description Default credentials RedisCredentials Redis credential block required key str Key to get required Returns: Type Description bytes Bytes from key in Redis Source code in prefect_redis/redis.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 @task async def redis_get_binary ( credentials : \"RedisCredentials\" , key : str , ) -> bytes : \"\"\"Get an bytes stored at a redis key Args: credentials: Redis credential block key: Key to get Returns: Bytes from `key` in Redis \"\"\" client = credentials . get_client () ret = await client . get ( key ) await client . close () return ret","title":"redis_get_binary()"},{"location":"tasks/#prefect_redis.redis.redis_set","text":"Set a Redis key to a any value. Will use cloudpickle to convert value to binary representation. Parameters: Name Type Description Default credentials RedisCredentials Redis credential block required key str Key to be set required value Any Value to be set to key . Does not accept open connections such as database-connections required ex Optional [ float ] If provided, sets an expire flag in seconds on key set None px Optional [ float ] If provided, sets an expire flag in milliseconds on key set None nx bool If set to True , set the value at key to value only if it does not already exist False xx bool If set tot True , set the value at key to value only if it already exists False Source code in prefect_redis/redis.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 @task async def redis_set ( credentials : \"RedisCredentials\" , key : str , value : Any , ex : Optional [ float ] = None , px : Optional [ float ] = None , nx : bool = False , xx : bool = False , ) -> None : \"\"\"Set a Redis key to a any value. Will use cloudpickle to convert `value` to binary representation. Args: credentials: Redis credential block key: Key to be set value: Value to be set to `key`. Does not accept open connections such as database-connections ex: If provided, sets an expire flag in seconds on `key` set px: If provided, sets an expire flag in milliseconds on `key` set nx: If set to `True`, set the value at `key` to `value` only if it does not already exist xx: If set tot `True`, set the value at `key` to `value` only if it already exists \"\"\" return await redis_set_binary . fn ( credentials , key , cloudpickle . dumps ( value ), ex , px , nx , xx )","title":"redis_set()"},{"location":"tasks/#prefect_redis.redis.redis_set_binary","text":"Set a Redis key to a binary value Parameters: Name Type Description Default credentials RedisCredentials Redis credential block required key str Key to be set required value bytes Value to be set to key . Must be bytes required ex Optional [ float ] If provided, sets an expire flag in seconds on key set None px Optional [ float ] If provided, sets an expire flag in milliseconds on key set None nx bool If set to True , set the value at key to value only if it does not already exist False xx bool If set tot True , set the value at key to value only if it already exists False Source code in prefect_redis/redis.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 @task async def redis_set_binary ( credentials : \"RedisCredentials\" , key : str , value : bytes , ex : Optional [ float ] = None , px : Optional [ float ] = None , nx : bool = False , xx : bool = False , ) -> None : \"\"\"Set a Redis key to a binary value Args: credentials: Redis credential block key: Key to be set value: Value to be set to `key`. Must be bytes ex: If provided, sets an expire flag in seconds on `key` set px: If provided, sets an expire flag in milliseconds on `key` set nx: If set to `True`, set the value at `key` to `value` only if it does not already exist xx: If set tot `True`, set the value at `key` to `value` only if it already exists \"\"\" client = credentials . get_client () await client . set ( key , value , ex = ex , px = px , nx = nx , xx = xx ) await client . close ()","title":"redis_set_binary()"}]}